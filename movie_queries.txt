# Movie SQL

## Normal Mode
* Select all columns and rows from the movies table
    SELECT * FROM movies;

* Select only the title and id of the first 10 rows
    SELECT title, id FROM movies LIMIT 10;

* Find the movie with the id of 485
    SELECT title FROM movies WHERE id=485;

* Find the id (only that column) of the movie Made in America (1993)
    SELECT id FROM movies WHERE title LIKE 'Made in America%';

* Find the first 10 sorted alphabetically
    SELECT * FROM movies ORDER BY title asc LIMIT 10;

* Find all movies from 2002
    SELECT * FROM movies WHERE title LIKE '%2002%';

* Find out what year the Godfather came out
    SELECT title FROM movies WHERE title LIKE '%godfather%';

* Without using joins find all the comedies
    SELECT title FROM movies WHERE genres LIKE '%comedy';

* Find all comedies in the year 2000
    SELECT title FROM movies WHERE genres LIKE '%comedy' AND title LIKE '%2000%';

* Find any movies that are about death and are a comedy
    SELECT title FROM movies WHERE genres LIKE '%comedy' AND title LIKE '%death%';

* Find any movies from either 2001 or 2002 with a title containing super
    SELECT title FROM movies WHERE title LIKE '%super%' AND title LIKE '%2001%' OR title LIKE '%super%' AND title LIKE '%2002%';



* Create a new table called actors (We are going to pretend the actor can only play in one movie). The table should include name, character name, foreign key to movies and date of birth at least plus an id field.
    CREATE TABLE actors (
        actor_id INT AUTO_INCREMENT,
        name VARCHAR(50) NOT NULL, 
        character_name VARCHAR(50), 
        movie_id INT,
        dob DATE,
        PRIMARY KEY (actor_id)
	);

* Pick 3 movies and create insert statements for 10 actors each.  You should use the multi value insert statements
    INSERT INTO actors (name, character_name, movie_id)
    VALUES 
        ('Tom Hanks','Woody',1),
        ('Tom Hanks','Woody',3114),
        ('Tom Hanks','Woody',78499),
        ('Tim Allen','Buzz Lightyear',1),
        ('Tim Allen','Buzz Lightyear',3114),
        ('Tim Allen','Buzz Lightyear',78499),
        ('Don Rickles','Mr. Potato Head',1),
        ('Don Rickles','Mr. Potato Head',3114),
        ('Don Rickles','Mr. Potato Head',78499),
        ('Jim Varney','Slinky Dog',1),
        ('Jim Varney','Slinky Dog',3114),
        ('Blake Clark','Slinky Dog',78499),
        ('Wallace Shawn','Rex',1),
        ('Wallace Shawn','Rex',3114),
        ('Wallace Shawn','Rex',78499),
        ('John Ratzenberger','Hamm',1),
        ('John Ratzenberger','Hamm',3114),
        ('John Ratzenberger','Hamm',78499),
        ('Annie Potts','Bo Peep',1),
        ('Annie Potts','Bo Peep',3114),
        ('John Morris','Andy Davis',1),
        ('John Morris','Andy Davis',3114),
        ('John Morris','Andy Davis',78499),
        ('Erik von Detten','Sid',1),
        ('Erik von Detten','Sid',78499),
        ('Laurie Metcalf','Mrs. Davis',1),
        ('Laurie Metcalf','Mrs. Davis',3114),
        ('Laurie Metcalf','Mrs. Davis',78499),
        ('Joan Cusack','Jessie the Yodeling Cowgirl',3114),
        ('Joan Cusack','Jessie the Yodeling Cowgirl',78499);

* Create a new column in the movie table to hold the MPAA rating.
UPDATE 5 different movies to their correct rating
    ALTER TABLE movies
    ADD rating VARCHAR(10) AFTER genres;
    UPDATE movies SET rating = 'PG-13' WHERE movies.id  = 170 OR movies.id  = 1527 OR movies.id  = 122892; 
    UPDATE movies SET rating = 'PG' WHERE movies.id  = 1197 OR movies.id  = 33004;


### With Joins
* Find all the ratings for the movie Godfather, show just the title and the rating
    SELECT movies.title, ratings.rating
    FROM
        movies
            LEFT JOIN ratings ON id = movie_id
    WHERE movies.title = 'Godfather, The (1972)';


* Order the previous objective by newest to oldest
    SELECT movies.title, ratings.rating
    FROM
        movies
            LEFT JOIN ratings ON id = movie_id
    WHERE movies.title = 'Godfather, The (1972)'
    ORDER BY ratings.timestamp desc;


* Find the comedies from 2005 and get the title and imdbid from the links table
    SELECT movies.title, links.imdb_id
    FROM
        movies
            LEFT JOIN links ON id = movie_id
    WHERE movies.genres LIKE '%comedy%' AND movies.title LIKE '%2005%';

* Find all movies that have no ratings
    SELECT *
    FROM   movies
    LEFT OUTER JOIN ratings
        ON (movies.id = ratings.movie_id)
        WHERE ratings.rating IS NULL;



### Complete the following aggregation objectives:
* Get the average rating for a movie
    SELECT movie_id, ROUND(AVG(rating),2)
    FROM ratings
    GROUP BY movie_id;


* Get the total ratings for a movie
    SELECT movie_id, COUNT(rating)
    FROM ratings
    GROUP BY movie_id;


* Get the total movies for a genre
    SELECT genres, COUNT(genres)
    FROM movies
    GROUP BY genres;



* Get the average rating for a user
    SELECT user_id, ROUND(AVG(rating),2)
    FROM ratings
    GROUP BY user_id


* Find the user with the most ratings
    SELECT user_id, COUNT(rating) as ratings
    FROM ratings
    GROUP BY user_id
    ORDER BY ratings DESC


* Find the user with the highest average rating
    SELECT user_id, ROUND(AVG(rating),2) as ratings
    FROM ratings
    GROUP BY user_id
    ORDER BY ratings DESC


* Find the user with the highest average rating with more than 50 reviews
    SELECT user_id, ROUND(AVG(rating),2) as average, COUNT(rating) as count
    FROM ratings
    GROUP BY `user_id`
    HAVING count > 50
    ORDER BY average DESC


* Find the movies with an average rating over 4
    SELECT movie_id, ROUND(AVG(rating),2) as average
    FROM ratings
    GROUP BY `movie_id`
    HAVING average > 4
    ORDER BY average DESC



## Hard Mode
* Use concat and research about internet movie database to produce a valid url from the imdbid
    ALTER TABLE links
    ADD imdb_link VARCHAR(255) AFTER imdb_id;
    UPDATE links SET imdb_link = CONCAT('https://www.imdb.com/title/tt',imdb_id)


* Use concat and research about the movie database to produce a valid url from tmdbid
    ALTER TABLE links
    ADD tmdb_link VARCHAR(255) AFTER tmdb_id;
    UPDATE links SET tmdb_link = CONCAT('https://www.themoviedb.org/movie/',tmdb_id)


* Get the ratings for The Unusuals and convert the timestamp into a human readable date time
    SELECT movie_id, rating, FROM_UNIXTIME(timestamp) 
    FROM ratings 
    WHERE movie_id=50
            Had to use The Usual Suspects, The Unsusals is not in this database.


* Using SQL normalize the tags in the tags table.  Make them lowercased and replace the spaces with `-`
    UPDATE tags 
    SET tag = LCASE(REPLACE(`tag`,' ','_'))


* Create a new field on the movies table for the year.  Using an update query and a substring method update that column for every movie with the year found in the title column.
    ALTER TABLE movies
    ADD year VARCHAR(4) AFTER genres;
    UPDATE movies 
    SET year = SUBSTRING(`title`,-5,4)


* Once you have completed the new year column go through the title column and strip out the year.
    UPDATE movies 
    SET title = REPLACE(`title`,SUBSTRING(`title`,-6,6),'')


* Create a new column in the movies table and store the average review for each and every movie. 
    ALTER TABLE movies
    ADD review VARCHAR(20) AFTER rating;

                                            UPDATE  movies movies       
                                                INNER JOIN
                                                    (
                                                        SELECT  AVG(rating) as review 
                                                        FROM    ratings 
                                                        GROUP BY movie_id
                                                    ) ratings  ON `movies.id` = `ratings.movie_id`
                                            SET     movies.review = ratings.review


